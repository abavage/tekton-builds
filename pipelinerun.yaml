apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  generateName: image-build-
  #name: image-build-4
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    ##pipelinesascode.tekton.dev/on-event: "[pull_request, push]"

    # The branch or tag we are targeting (ie: main, refs/tags/*)
    ##pipelinesascode.tekton.dev/on-target-branch: "[main]"

    # Fetch the git-clone task from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    ##pipelinesascode.tekton.dev/task: "git-clone:0.10.0"

    # Use golangci-lint from the hub to test our Golang project
    ##pipelinesascode.tekton.dev/task-1: "buildah:0.8.0"

    # You can add more tasks by increasing the suffix number, you can specify
    # them as array to have multiple of them.
    # browse the tasks you want to include from hub on https://hub.tekton.dev/
    #
    # pipelinesascode.tekton.dev/task-2: "[curl, buildah]"

    # how many runs we want to keep attached to this event
    ##pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events from Github.
    - name: repo_url
      value: https://github.com/abavage/tekton-builds
    - name: revision
      value: main
    - name: image
      value: "image-registry.openshift-image-registry.svc:5000/six/test:0.0.1"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
      #- name: IMAGE
      #- name: CONTAINERFILE_PATH
    workspaces:
      - name: source
      #- name: basic-auth
    
    tasks:
      - name: fetch-repository
        taskRef:
          resolver: cluster
          params:
            - name: kind
              value: task
            - name: name
              value: git-clone-1-20-0
            - name: namespace
              value: openshift-pipelines
        workspaces:
          - name: output
            workspace: source
          #- name: basic-auth
          #  workspace: basic-auth
        params:
          - name: URL
            value: $(params.repo_url)
          - name: REVISION
            value: $(params.revision)
          - name: DELETE_EXISTING
            value: "true"
      
      - name: build-image
        taskRef:
          resolver: cluster
          params:
            - name: kind
              value: task
            - name: name
              value: buildah-1-20-0
            - name: namespace
              value: openshift-pipelines
        runAfter:
          - fetch-repository
        workspaces:
          - name: source
            workspace: source
          #- name: basic-auth
          #  workspace: basic-auth
        params:
          - name: IMAGE
            value: "$(params.image)"
          - name: TLS_VERIFY
            value: true
          - name: VERBOSE
            value: false
          - name: DOCKERFILE
            value: ./containerfile
  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    # This workspace will inject secret to help the git-clone task to be able to
    # checkout the private repositories
    #- name: basic-auth
    #  secret:
    #    secretName: "{{ git_auth_secret }}"
